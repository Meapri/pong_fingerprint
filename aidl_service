#include <dlfcn.h>

// Placeholder for future IFingerprint implementation bridging to Goodix via dlopen.

#include <dlfcn.h>
#include <stdio.h>
#include <unistd.h>

int main(int argc, char** argv) {
    // Stub main: keep process alive so init can manage it while we replace with real impl later.
    while (true) {
        pause();
    }
    return 0;
}

#pragma once

// Placeholder header to allow building a stub binary via NDK.
// Real project should import AOSP AIDL generated headers for IFingerprint.

namespace aidl {
namespace android {
namespace hardware {
namespace biometrics {
namespace fingerprint {

class IFingerprint {};

} // namespace fingerprint
} // namespace biometrics
} // namespace hardware
} // namespace android
} // namespace aidl

cmake_minimum_required(VERSION 3.22)
project(fp_aidl_service LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_library(binder_ndk SHARED IMPORTED)
set_target_properties(binder_ndk PROPERTIES IMPORTED_LOCATION "${ANDROID_NDK_HOME}/sources/cxx-stl/llvm-libc++/libs/arm64-v8a/libc++_shared.so")

add_executable(android.hardware.biometrics.fingerprint-service.nt.pong
  src/service_main.cpp
  src/FingerprintService.cpp
)

target_include_directories(android.hardware.biometrics.fingerprint-service.nt.pong PRIVATE
  ${ANDROID_NDK_HOME}/sources/android
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_link_libraries(android.hardware.biometrics.fingerprint-service.nt.pong
  log
  dl
)

install(TARGETS android.hardware.biometrics.fingerprint-service.nt.pong RUNTIME DESTINATION .)


